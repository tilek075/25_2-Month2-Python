import sqlite3


def create_connection(db_file):
    conn = None
    try:
        conn = sqlite3.connect(db_file)
    except sqlite3.Error as e:
        print(e)
    return conn


def create_table(conn, sql):
    try:
        cursor = conn.cursor()
        cursor.execute(sql)
    except sqlite3.Error as e:
        print(e)


database = 'hw.db'
sql_create_products_table = '''
CREATE TABLE product(
id INTEGER PRIMARY KEY AUTOINCREMENT,
products_title VARCHAR(200) NOT NULL, 
price DOUBLE(10,2) NOT NULL DEFAULT 0.0,
quantity INTEGER(5) NOT NULL DEFAULT 0
)
'''


def create_product(conn, product):
    try:
        sql = '''INSERT INTO product(products_title, price, quantity) 
        VALUES (?, ?, ?)'''
        cursor = conn.cursor()
        cursor.execute(sql, product)
        conn.commit()
    except sqlite3.Error as e:
        print(e)


def select_all_products(conn):
    try:
        sql = '''SELECT * FROM product'''
        cursor = conn.cursor()
        cursor.execute(sql)
        rows = cursor.fetchall()
        for row in rows:
            print(row)
    except sqlite3.Error as e:
        print(e)


def update_quantity(conn, product):
    try:
        sql = '''UPDATE product SET quantity = ?, WHERE id = ?'''
        cursor = conn.cursor()
        cursor.execute(sql, product)
        conn.commit()
    except sqlite3.Error as e:
        print(e)


def update_price(conn, product):
    try:
        sql = '''UPDATE product SET price = ? WHERE id = ?'''
        cursor = conn.cursor()
        cursor.execute(sql, product)
        conn.commit()
    except sqlite3.Error as e:
        print(e)


def delete_product(conn, id_in):
    try:
        sql = '''DELETE FROM product WHERE id = ?'''
        cursor = conn.cursor()
        cursor.execute(sql, (id_in,))
        conn.commit()
    except sqlite3.Error as e:
        print(e)


def select_product_by_price_and_quantity(conn, price_limit, quantity_limit):
    try:
        sql = '''SELECT * FROM product WHERE price < ? and quantity >= ?'''
        cursor = conn.cursor()
        cursor.execute(sql, (price_limit, quantity_limit))
        rows = cursor.fetchall()
        for row in rows:
            print(row)
    except sqlite3.Error as e:
        print(e)


def select_search_product(conn, search_word):
    try:
        sql = f'''
        SELECT * FROM product WHERE products_title LIKE "%{str(search_word)}%"
        '''
        cursor = conn.cursor()
        cursor.execute(sql)
        rows = cursor.fetchall()
        for row in rows:
            print(row)
    except sqlite3.Error as e:
        print(e)


connection = create_connection(database)

if connection is not None:
    # create_table(connection, sql_create_products_table)
    # create_product(connection, ('Яблоко', 100.10, 1500))
    # create_product(connection, ('Груша', 80.29, 100))
    # create_product(connection, ('Масло', 350.10, 50))
    # create_product(connection, ('Сахар', 100.20, 100))
    # create_product(connection, ('Мука', 150.10, 200))
    # create_product(connection, ('Соль', 40.00, 4))
    # create_product(connection, ('Мыло', 40.10, 2000))
    # create_product(connection, ('Жидкое мыло', 200.25, 1400))
    # create_product(connection, ('Жидкое мыло с запахом ванили', 250.50, 900))
    # create_product(connection, ('Мыло детское', 300.10, 500))
    # create_product(connection, ('Зубная паста', 200.10, 200))
    # create_product(connection, ('Порошок', 1000.50, 70))
    # create_product(connection, ('Салфетки', 20.10, 15000))
    # create_product(connection, ('Шампунь', 500.00, 150))
    # create_product(connection, ('Гель', 250.10, 300))

    # select_all_products(connection)
    # select_product_by_price_and_quantity(connection, 50, 5)

    select_search_product(connection, 'мыло')
    connection.close()
